<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="" />
    <meta name="author" content="" />
    <title>Explore | Drone</title>
    <link rel="icon" type="image/x-icon" href="assets/favicon.ico" />
    <script src="https://use.fontawesome.com/releases/v6.3.0/js/all.js" crossorigin="anonymous"></script>
    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet" type="text/css" />
    <link href="https://fonts.googleapis.com/css?family=Roboto+Slab:400,100,300,700" rel="stylesheet" type="text/css" />
    <link href="css/styles.css" rel="stylesheet" />
</head>

<body id="page-top">

    <%- include('partials/userHeader') %>
    <!-- Masthead-->
    <header class="masthead">
        <div class="container">
            <div class="row">
                <div class="col-lg-6 col-sm-6 mb-4">
                    <div class="map" id="map" style="width: 100%; height: 75vh;"></div>
                </div>
                <div class="col-lg-6 col-sm-6 mb-4">
                    <div class="weather">
                        <p class="text-capitalize text-dark">
                            <span>High <%- weatherData.main.temp_max %> °C</span> 
                            <span>| Low <%- weatherData.main.temp_min %> °C</span> 
                        </p>
                        <p class="text-capitalize text-dark">
                            <span>Wind <%- weatherData.wind.speed %> mph</span>  
                        </p>
                        <p class="text-capitalize text-dark">
                            <span><%- weatherData.weather[0].description %> </span>  
                        </p>
                        <p class="text-capitalize text-dark">
                            <span>Humidity <%- weatherData.main.humidity %> mph</span>  
                        </p>
                    </div>
                    <div class="my-2" style="background-color: wheat;">
                        <video width="100%" height="250px" controls="">
                            <source src="https://archive.org/download/BigBuckBunny_124/Content/big_buck_bunny_720p_surround.mp4" type="video/mp4">
                        </video>
                    </div>
                    <div class="my-2" style="background-color: wheat;">
                        <video width="100%" height="250px" controls="">
                            <source src="https://archive.org/download/BigBuckBunny_124/Content/big_buck_bunny_720p_surround.mp4" type="video/mp4">
                        </video>
                    </div>
                </div>
            </div>
        </div>

        <%- include('partials/footer') %>
    </header>


    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <!-- Bootstrap core JS-->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Core theme JS-->
    <script src="js/scripts.js"></script>
    <script
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDma5myHKYOINpsEC8k4cgcJP9zlLVRYqc&libraries=places"></script>
    <script>
        let markers = [];
        let map;
        let positions = [];

        function getCoordinates() {
            return new Promise(function (resolve, reject) {
                navigator.geolocation.getCurrentPosition(resolve, reject);
            });
        }

        async function initialize() {
            const position = await this.getCoordinates();
            console.log(position)
            let curlatitude = position.coords.latitude;
            let curlongitude = position.coords.longitude;

            var latlng = new google.maps.LatLng(curlatitude, curlongitude);
            map = new google.maps.Map(document.getElementById('map'), {
                center: latlng,
                zoom: 12
            });

            // markers = positions.map(position => {
            //     const marker = new google.maps.Marker({
            //         position,
            //         map,
            //         draggable: true,
            //         animation: google.maps.Animation.DROP,
            //         positionId: position.positionId
            //     });
            //     marker.setMap(map)

            //     return marker
            // })
            var marker = new google.maps.Marker({
                map: map,
                position: latlng,
                draggable: true,
                animation: google.maps.Animation.DROP,
                icon: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'
            });
            //marker.setMap(map)
            var geocoder = new google.maps.Geocoder();
            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);
            var infowindow = new google.maps.InfoWindow();
            autocomplete.addListener('place_changed', function () {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    window.alert("Autocomplete's returned place contains no geometry");
                    return;
                }

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }

                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                bindDataToForm(place.formatted_address, place.geometry.location.lat(), place.geometry.location.lng());
                infowindow.setContent(place.formatted_address);
                infowindow.open(map, marker);

            });
            // this function will work on marker move event into map 
            markers.forEach((marker, index) => {
                google.maps.event.addListener(marker, 'dragend', function () {
                    geocoder.geocode({ 'latLng': marker.getPosition() }, function (results, status) {
                        if (status == google.maps.GeocoderStatus.OK) {
                            if (results[0]) {
                                bindDataToForm(results[0].formatted_address, marker.getPosition().lat(), marker.getPosition().lng());
                                infowindow.setContent(results[0].formatted_address);
                                infowindow.open(map, marker);
                            }
                        }
                    });
                });
                google.maps.event.addListener(marker, "click", function () {
                    let sPositionId = this.positionId
                    if (sPositionId) {
                        location.href = `/salons/detail-salon/${sPositionId}`;
                    }
                })
            })

        }
        function bindDataToForm(address, lat, lng) {
            console.log(address, lat, lng)
        }
        google.maps.event.addDomListener(window, 'load', initialize);

    </script>
</body>

</html>